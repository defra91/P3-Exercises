package Rimbalzi.gui;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.*;
import java.lang.Math;


/** La classe Ball descrive una pallina che verrà visualizzata nello schermo come un'ellisse in due dimensione. Essa estende appunto il concetto di ellisse con tutte le sue proprietà geometriche. Possiede inoltre un colore, una massa
 * espressa in kg, le sue componenti orizzontale e verticale della velocità e il tempo di volo (nel caso in cui ci sia gravità nel sistema).
 * @author Luca De Franceschi
 * @version 1.0, Ven 8 Novembre 2013
 */
public class Ball extends Ellipse2D.Double {
	/** Descrive la posizione in pixel nell'asse x della finestra. */
	private double posX = 0;
	
	/** Descrive la posizione in pixel nell'asse y della finestra. */
	private double posY = 0;
	
	/** Esprime in metri al secondo la componente orizzontale della velocità. */
	private double velX = 0;
	
	/** Esprime in metri al secondo la componete verticale della velocità. */
	private double velY = 0;	
	
	/** Esprime la larghezza in pixel dell'ellisse.*/
	private double xSize = 0;
	
	/** Esprime l'altezza in pixel dell'ellisse.*/
	private double ySize = 0;
	
	/** Esprime la massa della pallina espressa in kilogrammi */
	private double weight = 0;
	
	/** Rappresenta il colore del bordo dell'ellisse. */
	private Color borderColor;
	
	/** Rappresenta il colore di sfondo dell'ellisse. */
	private Color backgroundColor;
	
	/** Rappresenta il tempo espresso in secondi in cui la pallina è in aria. */
	double time = 0;
	
	/** Costruttore di default della pallina con tutti i campi dati settati a zero e colore impostato a nero. */
	public Ball() {
		borderColor = new Color(0,0,0);
		backgroundColor = new Color(0,0,0);
	}
	
	/** Costruttore parametrico della classe.
	 * @param x	Indica la posizione x.
	 * @param y Indica la posizione y.
	 * @param vx Indica la velocità iniziale orizzontale.
	 * @param vy Indica la velocità iniziale verticale.
	 * @param xs Indica la larghezza della pallina.
	 * @param ys Indica l'altezza della pallina.
	 * @param w Indica la massa della pallina.
	 * @param b1 Indica il colore del bordo della pallina.
	 * @param b2 Indica il colore dello sfondo della pallina.
	 */
	public Ball(double x, double y, double vx, double vy, double xs, double ys, double w, Color b1, Color b2) {
		super(x,y,xs,ys);
		posX = x; posY = y;
		velX = vx; velY = vy;
		xSize = xs; ySize = ys;
		weight = w;
		borderColor = b1; backgroundColor = b2;
	}
	
	/** Setter che imposta la posizione x della pallina espressa in pixel.
	 * @param d Posizione x della pallina espressa in pixel.
	 */
	void setPosX(double d) { posX = d; }
	
	/** Setter che imposta la posizione y della pallina espressa in pixel
	 * @param d Posizione y della pallina espressa in pixel.
	 */
	void setPosY(double d) { posY = d; }
	
	/** Setter che imposta la velocità iniziale orizzontale della pallina espressa in metri al secondo.
	 * @param d Velocità x della pallina espressa in metri al secondo.
	 */
	void setVelX(double d) { velX = d; }
	
	/** Setter che imposta la velocità iniziale verticale della pallina espressa in metri al secondo.
	 * @param d Velocità y della pallina espressa in metri al secondo.
	 */
	void setVelY(double d) { velY = d; }
	
	/** Setter che imposta la larghezza in pixel della pallina.
	 * @param d Larghezza in pixel della pallina.
	 */
	void setXSize(double d) { xSize = d; }
	
	/** Setter che imposta l'altezza in pixel della pallina.
	 * @param d Altezza in pixel della pallina.
	 */
	void setYSize(double d) { ySize = d; }
	
	/** Setter che imposta la massa della pallina espressa in kilogrammi.
	 * @param d Massa della pallina in kg.
	 */
	void setWeight(double d) { weight = d; }
	
	/**
	 * @param c
	 */
	void setBorderColor(Color c) { borderColor = c; }
	/**
	 * @param c
	 */
	void setBackgroundColor(Color c) { backgroundColor = c; }
	
	/* definizione dei metodi getter */
	/**
	 * @return
	 */
	double getPosX() { return posX; }
	/**
	 * @return
	 */
	double getPosY() { return posY; }
	/**
	 * @return
	 */
	double getVelX() { return velX; }
	/**
	 * @return
	 */
	double getVelY() { return velY; }
	/**
	 * @return
	 */
	double getXSize() { return xSize; }
	/**
	 * @return
	 */
	double getYSize() { return ySize; }
	/**
	 * @return
	 */
	double getWeight() { return weight; }
	/**
	 * @return
	 */
	Color getBorderColor() { return borderColor; }
	/**
	 * @return
	 */
	Color getBackgroundColor() { return backgroundColor; }
	
	/**
	 * @return
	 */
	Point2D.Double getCenter() { return new Point2D.Double(posX+xSize/2,posY+ySize/2); }
	
	/**
	 * @param bounds
	 */
	public void move(Rectangle2D bounds) {
		double x = posX + velX*(time/100);
		double y = posY - (velY*(time/100) - (0.5*9.81*Math.pow((time/100),2)));
		
		time += 10;
		
		if (y+ySize > bounds.getMaxY()) {
			time = 0;
			posX = x;
			velY -= 5;
			
		}
		setFrame(x,y,xSize,ySize);
	}
}
